{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "import pandas\n",
    "import numpy as np\n",
    "import yfinance as yf"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Useful tool"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Open</th>\n",
       "      <th>High</th>\n",
       "      <th>Low</th>\n",
       "      <th>Close</th>\n",
       "      <th>Volume</th>\n",
       "      <th>Dividends</th>\n",
       "      <th>Stock Splits</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Date</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>2021-01-04 00:00:00-05:00</th>\n",
       "      <td>216.710010</td>\n",
       "      <td>217.167719</td>\n",
       "      <td>209.191915</td>\n",
       "      <td>211.996597</td>\n",
       "      <td>37130100</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2021-01-05 00:00:00-05:00</th>\n",
       "      <td>211.577865</td>\n",
       "      <td>212.804921</td>\n",
       "      <td>210.058667</td>\n",
       "      <td>212.201126</td>\n",
       "      <td>23823000</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2021-01-06 00:00:00-05:00</th>\n",
       "      <td>206.620974</td>\n",
       "      <td>210.827997</td>\n",
       "      <td>206.396993</td>\n",
       "      <td>206.698883</td>\n",
       "      <td>35930700</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2021-01-07 00:00:00-05:00</th>\n",
       "      <td>208.442085</td>\n",
       "      <td>213.603474</td>\n",
       "      <td>208.120729</td>\n",
       "      <td>212.580933</td>\n",
       "      <td>27694500</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2021-01-08 00:00:00-05:00</th>\n",
       "      <td>212.960711</td>\n",
       "      <td>214.811028</td>\n",
       "      <td>211.353871</td>\n",
       "      <td>213.876129</td>\n",
       "      <td>22956200</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                                 Open        High         Low       Close  \\\n",
       "Date                                                                        \n",
       "2021-01-04 00:00:00-05:00  216.710010  217.167719  209.191915  211.996597   \n",
       "2021-01-05 00:00:00-05:00  211.577865  212.804921  210.058667  212.201126   \n",
       "2021-01-06 00:00:00-05:00  206.620974  210.827997  206.396993  206.698883   \n",
       "2021-01-07 00:00:00-05:00  208.442085  213.603474  208.120729  212.580933   \n",
       "2021-01-08 00:00:00-05:00  212.960711  214.811028  211.353871  213.876129   \n",
       "\n",
       "                             Volume  Dividends  Stock Splits  \n",
       "Date                                                          \n",
       "2021-01-04 00:00:00-05:00  37130100        0.0           0.0  \n",
       "2021-01-05 00:00:00-05:00  23823000        0.0           0.0  \n",
       "2021-01-06 00:00:00-05:00  35930700        0.0           0.0  \n",
       "2021-01-07 00:00:00-05:00  27694500        0.0           0.0  \n",
       "2021-01-08 00:00:00-05:00  22956200        0.0           0.0  "
      ]
     },
     "execution_count": 2,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Define the ticker symbol\n",
    "tickerSymbol = 'MSFT'\n",
    "\n",
    "# Get data on this ticker\n",
    "tickerData = yf.Ticker(tickerSymbol)\n",
    "\n",
    "# Get the historical prices for this ticker\n",
    "df = tickerData.history(period='1d', start='2021-1-1', end='2023-1-1')\n",
    "\n",
    "df.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [],
   "source": [
    "def cumulative_reward(df, func):\n",
    "    a = func(df)\n",
    "    buy_signal = a[0]\n",
    "    sell_signal = a[1]\n",
    "    buy_signal = [x for x in buy_signal if x is not np.nan]\n",
    "    sell_signal = [x for x in sell_signal if x is not np.nan]\n",
    "\n",
    "    # Assume we buy and sell at the close of the day\n",
    "    stock_Return = []\n",
    "    for i in range(0, len(buy_signal)):\n",
    "        stock_Return.append(sell_signal[i] - buy_signal[i])\n",
    "    \n",
    "    return np.sum(stock_Return)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Simple positive negative strategys"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [],
   "source": [
    "def buy_sell_sentiment(signal):\n",
    "    Buy = []\n",
    "    Sell = []\n",
    "    flag = -1\n",
    "\n",
    "    for i in range(0, len(signal)):\n",
    "        if signal['Sentiment'][i] == 0:  # Positive sentiment\n",
    "            Sell.append(np.nan)\n",
    "            if flag != 1:\n",
    "                Buy.append(signal['Close'][i])\n",
    "                flag = 1\n",
    "            else:\n",
    "                Buy.append(np.nan)\n",
    "        elif signal['Sentiment'][i] == 1:  # Negative sentiment\n",
    "            Buy.append(np.nan)\n",
    "            if flag != 0:\n",
    "                Sell.append(signal['Close'][i])\n",
    "                flag = 0\n",
    "            else:\n",
    "                Sell.append(np.nan)\n",
    "        else:  # Neutral sentiment\n",
    "            Buy.append(np.nan)\n",
    "            Sell.append(np.nan)\n",
    "\n",
    "    return (Buy, Sell)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Simple first implementation we look at the sentiment of the news and if it is positive we buy and if it is negative we sell. We will use the sentiment of the news from the previous day to make our decision, by mean of the sentences in a same day."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [],
   "source": [
    "roberta_df = pandas.read_csv('/Users/tony/Desktop/Antoine/Semestre/9.Financial ML/ProjectFinancialNews/data/msft_roberta_output.csv')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Unnamed: 0</th>\n",
       "      <th>id</th>\n",
       "      <th>company</th>\n",
       "      <th>title</th>\n",
       "      <th>published</th>\n",
       "      <th>ticker</th>\n",
       "      <th>company_words</th>\n",
       "      <th>sentences</th>\n",
       "      <th>Predictions</th>\n",
       "      <th>Positive</th>\n",
       "      <th>Negative</th>\n",
       "      <th>Neutral</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>68592</td>\n",
       "      <td>bcc0fcfd61771333cec814b416501bbbd697cf277387d6...</td>\n",
       "      <td>Microsoft_Corporation</td>\n",
       "      <td>US stocks end tumultuous year at record high</td>\n",
       "      <td>2021-01-01 00:03:33.567</td>\n",
       "      <td>MSFT</td>\n",
       "      <td>microsoft</td>\n",
       "      <td>['the nasdaq composite dominated by tech giant...</td>\n",
       "      <td>[0]</td>\n",
       "      <td>[0.9996963739395142]</td>\n",
       "      <td>[0.00022189873561728746]</td>\n",
       "      <td>[8.170285582309589e-05]</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>68593</td>\n",
       "      <td>229f088b272773bb365acc4c9ba9b9b50ab4e107002500...</td>\n",
       "      <td>Microsoft_Corporation</td>\n",
       "      <td>Shonda Rhimes, an impresario rewriting televis...</td>\n",
       "      <td>2021-01-01 13:00:50.914</td>\n",
       "      <td>MSFT</td>\n",
       "      <td>microsoft</td>\n",
       "      <td>['she is producing podcasts with iheartmedia a...</td>\n",
       "      <td>[2]</td>\n",
       "      <td>[0.00024287206178996712]</td>\n",
       "      <td>[4.945999899064191e-05]</td>\n",
       "      <td>[0.9997076392173767]</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>68594</td>\n",
       "      <td>4577672c2f875e48d4686a92c4c684007be8ab9c437800...</td>\n",
       "      <td>Microsoft_Corporation</td>\n",
       "      <td>Prospering in the pandemic: 2020's top 100 com...</td>\n",
       "      <td>2021-01-01 13:23:34.070</td>\n",
       "      <td>MSFT</td>\n",
       "      <td>microsoft</td>\n",
       "      <td>['big companies such as google microsoft and c...</td>\n",
       "      <td>[1, 0, 0]</td>\n",
       "      <td>[0.0005603625904768705, 0.9996532201766968, 0....</td>\n",
       "      <td>[0.9983035326004028, 0.0001870935084298253, 0....</td>\n",
       "      <td>[0.0011360332136973739, 0.00015969171363394707...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>68595</td>\n",
       "      <td>2a5fd5877f1a0f2caa52b597bbbff8bbe9bd85b12b439c...</td>\n",
       "      <td>Microsoft_Corporation</td>\n",
       "      <td>How coronavirus has shaped the home of tomorrow</td>\n",
       "      <td>2021-01-01 18:00:51.542</td>\n",
       "      <td>MSFT</td>\n",
       "      <td>microsoft</td>\n",
       "      <td>['companies including google twitter zillow an...</td>\n",
       "      <td>[2]</td>\n",
       "      <td>[0.0007899046177044511]</td>\n",
       "      <td>[7.977452332852408e-05]</td>\n",
       "      <td>[0.9991303086280823]</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>68596</td>\n",
       "      <td>0916cc94659aafa60af44e27ba5148db245226a05720a0...</td>\n",
       "      <td>Microsoft_Corporation</td>\n",
       "      <td>Business &amp; Finance</td>\n",
       "      <td>2021-01-02 00:00:00.000</td>\n",
       "      <td>MSFT</td>\n",
       "      <td>microsoft</td>\n",
       "      <td>['corporate and government systems were able t...</td>\n",
       "      <td>[2]</td>\n",
       "      <td>[0.00035442551597952843]</td>\n",
       "      <td>[5.5933036492206156e-05]</td>\n",
       "      <td>[0.999589741230011]</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   Unnamed: 0                                                 id  \\\n",
       "0       68592  bcc0fcfd61771333cec814b416501bbbd697cf277387d6...   \n",
       "1       68593  229f088b272773bb365acc4c9ba9b9b50ab4e107002500...   \n",
       "2       68594  4577672c2f875e48d4686a92c4c684007be8ab9c437800...   \n",
       "3       68595  2a5fd5877f1a0f2caa52b597bbbff8bbe9bd85b12b439c...   \n",
       "4       68596  0916cc94659aafa60af44e27ba5148db245226a05720a0...   \n",
       "\n",
       "                 company                                              title  \\\n",
       "0  Microsoft_Corporation      US stocks end tumultuous year at record high    \n",
       "1  Microsoft_Corporation  Shonda Rhimes, an impresario rewriting televis...   \n",
       "2  Microsoft_Corporation  Prospering in the pandemic: 2020's top 100 com...   \n",
       "3  Microsoft_Corporation    How coronavirus has shaped the home of tomorrow   \n",
       "4  Microsoft_Corporation                                 Business & Finance   \n",
       "\n",
       "                 published ticker company_words  \\\n",
       "0  2021-01-01 00:03:33.567   MSFT     microsoft   \n",
       "1  2021-01-01 13:00:50.914   MSFT     microsoft   \n",
       "2  2021-01-01 13:23:34.070   MSFT     microsoft   \n",
       "3  2021-01-01 18:00:51.542   MSFT     microsoft   \n",
       "4  2021-01-02 00:00:00.000   MSFT     microsoft   \n",
       "\n",
       "                                           sentences Predictions  \\\n",
       "0  ['the nasdaq composite dominated by tech giant...         [0]   \n",
       "1  ['she is producing podcasts with iheartmedia a...         [2]   \n",
       "2  ['big companies such as google microsoft and c...   [1, 0, 0]   \n",
       "3  ['companies including google twitter zillow an...         [2]   \n",
       "4  ['corporate and government systems were able t...         [2]   \n",
       "\n",
       "                                            Positive  \\\n",
       "0                               [0.9996963739395142]   \n",
       "1                           [0.00024287206178996712]   \n",
       "2  [0.0005603625904768705, 0.9996532201766968, 0....   \n",
       "3                            [0.0007899046177044511]   \n",
       "4                           [0.00035442551597952843]   \n",
       "\n",
       "                                            Negative  \\\n",
       "0                           [0.00022189873561728746]   \n",
       "1                            [4.945999899064191e-05]   \n",
       "2  [0.9983035326004028, 0.0001870935084298253, 0....   \n",
       "3                            [7.977452332852408e-05]   \n",
       "4                           [5.5933036492206156e-05]   \n",
       "\n",
       "                                             Neutral  \n",
       "0                            [8.170285582309589e-05]  \n",
       "1                               [0.9997076392173767]  \n",
       "2  [0.0011360332136973739, 0.00015969171363394707...  \n",
       "3                               [0.9991303086280823]  \n",
       "4                                [0.999589741230011]  "
      ]
     },
     "execution_count": 13,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "roberta_df.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "input = roberta_df[['published', 'Predictions']]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "print(\"Cumulative Return : \", cumulative_reward(df, buy_sell_sentiment))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Now we take the maximum of the different sentences per day between positive and Negative"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "We take some threshold only the value greater than this into account, with mean of the day"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Momemntum X News trading strategy"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## With MACD"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [],
   "source": [
    "def buy_sell_momentum_sentiment(signal):\n",
    "    Buy = []\n",
    "    Sell = []\n",
    "    flag = -1\n",
    "\n",
    "    for i in range(0, len(signal)):\n",
    "        if signal['MACD'][i] > signal['Signal Line'][i] and signal['Sentiment'][i] == 0:  # Positive momentum and sentiment\n",
    "            Sell.append(np.nan)\n",
    "            if flag != 1:\n",
    "                Buy.append(signal['Close'][i])\n",
    "                flag = 1\n",
    "            else:\n",
    "                Buy.append(np.nan)\n",
    "        elif signal['MACD'][i] < signal['Signal Line'][i] and signal['Sentiment'][i] == 1:  # Negative momentum and sentiment\n",
    "            Buy.append(np.nan)\n",
    "            if flag != 0:\n",
    "                Sell.append(signal['Close'][i])\n",
    "                flag = 0\n",
    "            else:\n",
    "                Sell.append(np.nan)\n",
    "        else:  # Neutral or conflicting momentum and sentiment\n",
    "            Buy.append(np.nan)\n",
    "            Sell.append(np.nan)\n",
    "\n",
    "    return (Buy, Sell)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## With RSI"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "def buy_sell_RSI_sentiment(signal, upper=70, lower=30):\n",
    "    Buy = []\n",
    "    Sell = []\n",
    "\n",
    "    for i in range(0, len(signal)):\n",
    "        if signal['RSI'][i] > upper and signal['Sentiment'][i] == 1:  # Overbought and negative sentiment\n",
    "            Sell.append(signal['Close'][i])\n",
    "            Buy.append(np.nan)\n",
    "        elif signal['RSI'][i] < lower and signal['Sentiment'][i] == 0:  # Oversold and positive sentiment\n",
    "            Buy.append(signal['Close'][i])\n",
    "            Sell.append(np.nan)\n",
    "        else:  # Neutral or conflicting RSI and sentiment\n",
    "            Buy.append(np.nan)\n",
    "            Sell.append(np.nan)\n",
    "\n",
    "    return (Buy, Sell)"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "myenv",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.16"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
